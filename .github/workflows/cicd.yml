name: CICD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Set Environment Variables
        run: |
            echo "AWS_IOT_CLIENT_ENDPOINT=${{ secrets.AWS_IOT_CLIENT_ENDPOINT }}" >> $GITHUB_ENV
            echo "AWS_IOT_CLIENT_ID=${{ secrets.AWS_IOT_CLIENT_ID }}" >> $GITHUB_ENV
            echo "AWS_IOT_ACCESS_KEY_ID=${{ secrets.AWS_IOT_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_IOT_SECRET_ACCESS_KEY=${{ secrets.AWS_IOT_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build Docker Image
        run: docker build -t danujan/spring_app .
      - name: Push Docker Image
        run: docker push danujan/spring_app:latest

  deploy:
    needs: build
    runs-on: hello
    steps:
      - name: Pull image from docker hub
        run: docker pull danujan/spring_app:latest
      - name: Delete Old Container
        run: docker rm -f springContainer
      - name: Run docker container
        run: docker run -d -p 8080:8080 --name springContainer danujan/spring_app



##        uses: actions/setup-java@v3
##        with:
##          distribution: 'temurin'
##          java-version: '17'
##
##      - name: Build Project
##        run: mvn clean install -DskipTests
##
##      - name: Configure AWS credentials
##        uses: aws-actions/configure-aws-credentials@v3
##        with:
##          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
##          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##          aws-region: 'ap-south-1'
##
##      - name: Login to Amazon ECR
##        id: login-ecr
##        uses: aws-actions/amazon-ecr-login@v2
##        with:
##         mask-password: 'true'
##
##      - name: Build, tag, and push image to Amazon ECR
##        id: build-image
##        env:
##          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
##          IMAGE_TAG: ${{ github.sha }}
##          REPOSITORY: springapplication
##        run: |
##          # Build a docker container and
##          # push it to ECR so that it can
##          # be deployed to ECS.
##          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
##          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
##          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
##
##      - name: Fill in the new image ID in the Amazon ECS task definition
##        id: task-def
##        uses: aws-actions/amazon-ecs-render-task-definition@v1
##        with:
##          task-definition: springapplication-taskdefinition.json
##          container-name: springapplication
##          image: ${{ steps.build-image.outputs.image }}
##      - name: Deploy Amazon ECS task definition
##        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
##        with:
##          task-definition: ${{ steps.task-def.outputs.task-definition }}
##          service: springboot-example-service
##          cluster: springapplication2
##          wait-for-service-stability: true
##
##
##
##
##
##
##
##
